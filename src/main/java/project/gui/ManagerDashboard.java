/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.gui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import project.dao.UserDao;
import project.daoimpl.UserDaoImpl;
import project.model.user.Role;
import project.model.user.User;
import project.service.UserService;
import project.utils.UserSessionManager;

import java.sql.*;

import java.util.*;

/**
 *
 * @author linyu
 */
public class ManagerDashboard extends javax.swing.JFrame {

    private int userId;

    private Role role;

    private UserDao userDao = new UserDaoImpl();

    private UserService userService = new UserService(userDao);

    /**
     * Creates new form Default
     */
    public ManagerDashboard() {
        User user = UserSessionManager.getInstance().getLoggedInUser();
        initComponents();
        loadManagerData();
        populateRoleChoice();
        btnStaff.setVisible(false);
        if (userService.isUserManager(user.getUserID())){
            btnStaff.setVisible(true);
        }
    }

    private static final Map<String, Integer> roleMap = new HashMap<>();

    static {
        roleMap.put("STAFF", 1); // Replace with actual role IDs
        roleMap.put("CUSTOMER", 2);
        roleMap.put("MANAGER", 3);
    }

    private void populateRoleChoice() {
        for (String roleName : roleMap.keySet()) {
            roleChoice.add(roleName);
        }
    }

    private void loadManagerData() {
        DefaultTableModel model = new DefaultTableModel();
    
        // Add column headers
        model.addColumn("User ID");
        model.addColumn("Forename");
        model.addColumn("Surname");
        model.addColumn("Email");
        model.addColumn("Roles");
    
        // Use try-with-resources to automatically close resources
        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://stusql.dcs.shef.ac.uk/team015", "team015", "eSh7Shahk");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                "SELECT users.user_id, users.forename, users.surname, users.email, " +
                "GROUP_CONCAT(roles.role_name ORDER BY roles.role_name) AS roles " +
                "FROM users " +
                "JOIN user_roles ON users.user_id = user_roles.user_id " +
                "JOIN roles ON user_roles.role_id = roles.role_id " +
                "GROUP BY users.user_id"
            )
        ) {
            // Add rows to the model
            while (rs.next()) {
                Object[] row = new Object[5];
                row[0] = rs.getString("user_id");
                row[1] = rs.getString("forename");
                row[2] = rs.getString("surname");
                row[3] = rs.getString("email");
                row[4] = rs.getString("roles"); // Note: Make sure this matches the actual column name in the result set
                model.addRow(row);
            }
    
            // Set the model to the existing JTable
            jTable1.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception (log or show an error message)
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnStaff = new javax.swing.JButton();
        btnUser = new javax.swing.JButton();
        txtUserId = new javax.swing.JTextField();
        roleChoice = new java.awt.Choice();
        label1 = new java.awt.Label();
        btnAddRole = new java.awt.Button();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        button4 = new java.awt.Button();
        btnRemoveRole = new java.awt.Button();

        jPopupMenu1.setPreferredSize(new java.awt.Dimension(20, 50));

        jMenuItem1.setText("jMenuItem1");
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Category");
        setPreferredSize(new java.awt.Dimension(1000, 800));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 800));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(0, 102, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 800));

        btnLogOut.setBackground(new java.awt.Color(0, 102, 0));
        btnLogOut.setForeground(new java.awt.Color(204, 204, 204));
        btnLogOut.setText("Log out");
        btnLogOut.setBorder(null);
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(722, Short.MAX_VALUE)
                .addComponent(btnLogOut)
                .addGap(61, 61, 61))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 250, 800);

        jPanel3.setBackground(new java.awt.Color(0, 102, 0));

        title.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Staff List");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(title)
                .addContainerGap(616, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(19, 19, 19))
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(250, 120, 750, 70);

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 40, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 126, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel5);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(320, 280, 630, 430);

        btnStaff.setBackground(new java.awt.Color(0, 102, 0));
        btnStaff.setForeground(new java.awt.Color(204, 204, 204));
        btnStaff.setText("Staff interface");
        btnStaff.setBorder(null);
        btnStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStaffActionPerformed(evt);
            }
        });
        jPanel1.add(btnStaff);
        btnStaff.setBounds(840, 10, 130, 17);

        btnUser.setBackground(new java.awt.Color(0, 102, 0));
        btnUser.setForeground(new java.awt.Color(204, 204, 204));
        btnUser.setText("User interface");
        btnUser.setBorder(null);
        btnUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserActionPerformed(evt);
            }
        });
        jPanel1.add(btnUser);
        btnUser.setBounds(840, 50, 150, 17);

        txtUserId.setText("User ID");
        jPanel1.add(txtUserId);
        txtUserId.setBounds(460, 720, 180, 23);
        jPanel1.add(roleChoice);
        roleChoice.setBounds(670, 720, 60, 20);

        label1.setText("Change User Role:");
        jPanel1.add(label1);
        label1.setBounds(340, 720, 110, 20);

        btnAddRole.setActionCommand("Confirm");
        btnAddRole.setBackground(new java.awt.Color(0, 102, 0));
        btnAddRole.setForeground(new java.awt.Color(255, 255, 255));
        btnAddRole.setLabel("Add");
        btnAddRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoleActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddRole);
        btnAddRole.setBounds(750, 720, 70, 30);

        button2.setActionCommand("Confirm");
        button2.setBackground(new java.awt.Color(0, 102, 0));
        button2.setForeground(new java.awt.Color(255, 255, 255));
        button2.setLabel("All");
        jPanel1.add(button2);
        button2.setBounds(300, 220, 70, 30);

        button3.setActionCommand("Confirm");
        button3.setBackground(new java.awt.Color(0, 102, 0));
        button3.setForeground(new java.awt.Color(255, 255, 255));
        button3.setLabel("Staff");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        jPanel1.add(button3);
        button3.setBounds(410, 220, 80, 30);

        button4.setActionCommand("Confirm");
        button4.setBackground(new java.awt.Color(0, 102, 0));
        button4.setForeground(new java.awt.Color(255, 255, 255));
        button4.setLabel("Managers");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });
        jPanel1.add(button4);
        button4.setBounds(520, 220, 80, 30);

        btnRemoveRole.setActionCommand("Confirm");
        btnRemoveRole.setBackground(new java.awt.Color(0, 102, 0));
        btnRemoveRole.setForeground(new java.awt.Color(255, 255, 255));
        btnRemoveRole.setLabel("Remove");
        btnRemoveRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRoleActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveRole);
        btnRemoveRole.setBounds(860, 720, 80, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1000, 800);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStaffActionPerformed
        // log out
        Staff StaffFrame = new Staff();
        StaffFrame.setVisible(true);
        StaffFrame.pack();
        StaffFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnStaffActionPerformed

    private void btnUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserActionPerformed
        Default DefaultFrame = new Default();
        DefaultFrame.setVisible(true);
        DefaultFrame.pack();
        DefaultFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnUserActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        Login LoginFrame = new Login();
        LoginFrame.setVisible(true);
        LoginFrame.pack();
        LoginFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void button1(java.awt.event.ActionEvent evt) {
        // Get the selected role from choice1
        String selectedRole = ((String) roleChoice.getSelectedItem()); // Convert to lowercase
    
        // Get the user_id from the text area
        String userId = txtUserId.getText();
    
        // Validate user_id and selectedRole
        if (userId.isEmpty() || selectedRole == null || selectedRole.isEmpty()) {
            // Handle the case where user_id or selectedRole is empty
            // (show an error message, log, etc.)
            System.out.println("User ID or Role is empty.");
            return;
        }
    
        // Get the role_id based on the selected role using the class variable roleMap
        Integer roleId = roleMap.get(selectedRole);
    
        if (roleId == null) {
            System.out.println("Role not recognized.");
            return;
        }
    
        // SQL query to check if the user already has the specified role
        String checkRoleQuery = "SELECT COUNT(*) FROM user_roles WHERE user_id = ? AND role_id = ?";
    
        // SQL query to remove the specified role if it already exists for the user
        String removeRoleQuery = "DELETE FROM user_roles WHERE user_id = ? AND role_id = ?";
    
        // SQL query to insert the specified role if it doesn't exist for the user
        String insertRoleQuery = "INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)";
    
        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://stusql.dcs.shef.ac.uk/team015", "team015", "eSh7Shahk");
            PreparedStatement checkStmt = con.prepareStatement(checkRoleQuery);
            PreparedStatement removeStmt = con.prepareStatement(removeRoleQuery);
            PreparedStatement insertStmt = con.prepareStatement(insertRoleQuery);
        ) {
            // Check if the user already has the specified role
            checkStmt.setString(1, userId);
            checkStmt.setInt(2, roleId);
            ResultSet rs = checkStmt.executeQuery();
            rs.next();
            int count = rs.getInt(1);
    
            if (count > 0) {
                // User already has the role, so remove it
                removeStmt.setString(1, userId);
                removeStmt.setInt(2, roleId);
                int rowsRemoved = removeStmt.executeUpdate();
    
                if (rowsRemoved > 0) {
                    // Reload manager data to update the table
                    loadManagerData();
                    System.out.println("User role removed successfully.");
                } else {
                    System.out.println("Failed to remove user role.");
                }
            } else {
                // User doesn't have the role, so insert it
                insertStmt.setString(1, userId);
                insertStmt.setInt(2, roleId);
                int rowsInserted = insertStmt.executeUpdate();
    
                if (rowsInserted > 0) {
                    // Reload manager data to update the table
                    loadManagerData();
                    System.out.println("User role added successfully.");
                } else {
                    System.out.println("Failed to add user role.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("SQL Exception: " + e.getMessage());
            // Handle the exception (log or show an error message)
        }
    }
    
    private void defaultTable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultTable
        loadManagerData();
    }//GEN-LAST:event_defaultTable

    private void btnAddRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoleActionPerformed
        // TODO add your handling code here:
        userId = Integer.parseInt(txtUserId.getText());
        String choice = roleChoice.getSelectedItem();
        try {
            Role role = Role.valueOf(choice);
            userDao.addUserRole(userId, role);
            JOptionPane.showMessageDialog(null,  role + " role of User: " + userId + " has been added",
                    "Add role", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Unexpected gauge type");
        }

        
    }//GEN-LAST:event_btnAddRoleActionPerformed

    private void btnRemoveRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRoleActionPerformed
        // TODO add your handling code here:
        userId = Integer.parseInt(txtUserId.getText());
        String choice = roleChoice.getSelectedItem();
        try {
            Role role = Role.valueOf(choice);
            userDao.removeUserRole(userId, role);
            JOptionPane.showMessageDialog(null,  role + " role of User: " + userId + " has been removed",
                    "Remove role", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Unexpected gauge type");
        }
    }//GEN-LAST:event_btnRemoveRoleActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model = new DefaultTableModel();
    
        // Add column headers
        model.addColumn("User ID");
        model.addColumn("Forename");
        model.addColumn("Surname");
        model.addColumn("Email");
        model.addColumn("Roles");
    
        // Use try-with-resources to automatically close resources
        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://stusql.dcs.shef.ac.uk/team015", "team015", "eSh7Shahk");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                "SELECT users.user_id, users.forename, users.surname, users.email, GROUP_CONCAT(roles.role_name) AS roles " +
                "FROM users " +
                "JOIN user_roles ON users.user_id = user_roles.user_id " +
                "JOIN roles ON user_roles.role_id = roles.role_id " +
                "WHERE roles.role_name = 'STAFF' " +
                "GROUP BY users.user_id"
            )
        ) {
            // Add rows to the model
            while (rs.next()) {
                Object[] row = new Object[5];
                row[0] = rs.getString("user_id");
                row[1] = rs.getString("forename");
                row[2] = rs.getString("surname");
                row[3] = rs.getString("email");
                row[4] = rs.getString("roles");
                model.addRow(row);
            }
    
            // Set the model to the existing JTable
            jTable1.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception (log or show an error message)
        }
    }
    
    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model = new DefaultTableModel();
    
        // Add column headers
        model.addColumn("User ID");
        model.addColumn("Forename");
        model.addColumn("Surname");
        model.addColumn("Email");
        model.addColumn("Roles");
    
        // Use try-with-resources to automatically close resources
        try (
            Connection con = DriverManager.getConnection("jdbc:mysql://stusql.dcs.shef.ac.uk/team015", "team015", "eSh7Shahk");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                "SELECT users.user_id, users.forename, users.surname, users.email, GROUP_CONCAT(roles.role_name) AS roles " +
                "FROM users " +
                "JOIN user_roles ON users.user_id = user_roles.user_id " +
                "JOIN roles ON user_roles.role_id = roles.role_id " +
                "WHERE roles.role_name = 'MANAGER' " +
                "GROUP BY users.user_id"
            )
        ) {
            // Add rows to the model
            while (rs.next()) {
                Object[] row = new Object[5];
                row[0] = rs.getString("user_id");
                row[1] = rs.getString("forename");
                row[2] = rs.getString("surname");
                row[3] = rs.getString("email");
                row[4] = rs.getString("roles");
                model.addRow(row);
            }
    
            // Set the model to the existing JTable
            jTable1.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception (log or show an error message)
        }
    }
    
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnAddRole;
    private javax.swing.JButton btnLogOut;
    private java.awt.Button btnRemoveRole;
    private javax.swing.JButton btnStaff;
    private javax.swing.JButton btnUser;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    private java.awt.Choice roleChoice;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtUserId;
    // End of variables declaration//GEN-END:variables
}
