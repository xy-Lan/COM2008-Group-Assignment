package project.daoimpl;

import project.model.user.*;
import project.service.MysqlService;
import project.model.inventory.*;
import project.model.payment.*;
import project.model.order.*;
import project.model.address.*;
import project.dao.UserDao;

import java.util.List;
import java.sql.*;

public class UserDaoImpl implements UserDao {

    private MysqlService mysqlService;

    public UserDaoImpl(MysqlService mysqlService) {
        this.mysqlService = mysqlService;
    }

    @Override
    public int addUser(User user) {
        // Implement JDBC code to insert a new User into the database
        try {
            // Obtain a database connection from the MySQL service
            Connection connection = mysqlService.getConnection();
            //// SQL statement to insert a new user, focusing on the email attribute
            String sql = "INSERT INTO users (email) VALUES (?)";

            try (PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                // Set the email value in the SQL statement
                preparedStatement.setString(1, user.getEmail());

                //// Execute the update and check the number of affected rows
                int affectedRows = preparedStatement.executeUpdate();
                if (affectedRows == 0) {
                     // If no rows are affected, it indicates the insertion failed
                    throw new SQLException("Creating user failed, no rows affected.");
                }

                // Retrieve the keys generated by the database (user IDs)
                try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        //  // Return the first column of the ResultSet, i.e., the user ID
                        //                    return generatedKeys.getInt(1);
                        return generatedKeys.getInt(1);
                    } else {
                   // If no keys are generated, it indicates failure to obtain the user ID
                        throw new SQLException("Creating user failed, no ID obtained.");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Error handling: return 0 or consider rethrowing the exception or using a custom error strategy
            return 0;
        }
    }

    @Override
    public void addUserPasswordHash(int userId, String passwordHash) {
        // Using mysqlService to add a user's password hash to the database
    }

    @Override
    public String getUserPasswordHash(String email) {
        // Using mysqlService to get a user's password hash
        return null; //Returns the user's password hash or null if not found
    }

    @Override
    public User getUserById(String userId) {
        // Implement JDBC code to retrieve a User by userId from the database
        return null; // Replace with actual user retrieved from the database
    }

    @Override
    public User getUserByEmail(String email) {
        // Implement JDBC code to retrieve a User by email from the database
        return null; // Replace with actual user retrieved from the database
    }

    @Override
    public List<User> getAllUsers() {
        // Implement JDBC code to retrieve all Users from the database
        return null; // Replace with actual list of users retrieved from the database
    }

    @Override
    public void updateUser(User user) {
        // Implement JDBC code to update a User's details in the database
    }

    @Override
    public void deleteUser(String userId) {
        // Implement JDBC code to delete a User by userId from the database
    }

    // The following methods would be similarly implemented, with JDBC operations
    // to handle the corresponding user-related actions in the database.

    @Override
    public List<Role> getUserRoles(String userId) {
        return null;
    }

    @Override
    public void addUserRole(String userId, Role role) {
    }

    @Override
    public void removeUserRole(String userId, Role role) {
    }



    @Override
    public List<Inventory> getUserInventories(String userId) {
        return null;
    }


    @Override
    public void addInventoryToUser(String userId, Inventory inventory) {
    }

    @Override
    public void removeInventoryFromUser(String userId, Inventory inventory) {
    }

    @Override
    public List<Payment> getUserPayments(String userId) {
        return null;
    }

    @Override
    public void addPaymentToUser(String userId, Payment payment) {
    }

    @Override
    public void removePaymentFromUser(String userId, String paymentId) {
    }

    @Override
    public List<Order> getUserOrders(String userId) {
        return null;
    }

    @Override
    public void addOrderToUser(String userId, Order order) {
    }

    @Override
    public void updateOrderStatus(String userId, String orderId, OrderStatus status) {
    }

    @Override
    public Address getUserAddress(String userId) {
        return null;
    }

    @Override
    public void updateUserAddress(String userId, Address address) {
    }
}

