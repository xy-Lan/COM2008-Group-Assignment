package project.daoimpl;

import java.util.ArrayList;
import java.util.List;

import project.dao.OrderDao;
import project.model.order.Order;
import project.model.order.OrderLine;
import project.service.MysqlService;

import java.sql.*;
import java.util.Optional;
import java.util.logging.Logger;
import java.util.logging.Level;

public class OrderDaoImpl implements OrderDao{
    /**
     * LOGGER is used for logging messages and exceptions in the OrderDaoImpl class.
     * It provides a way to log important information and errors, which is essential for debugging and monitoring.
     * The log's name is based on the class name, which helps in identifying the source of log messages.
     */
    private static final Logger LOGGER = Logger.getLogger(OrderDaoImpl.class.getName());

    private static final String INSERT_ORDER_SQL = "INSERT INTO orders (user_id, order_status) VALUES (?, ?);";

    private MysqlService mysqlService;

    public OrderDaoImpl(MysqlService mysqlService) {
        this.mysqlService = mysqlService;
    }

    @Override
    public void addOrder(Order order) {
        // Assume INSERT_ORDER_SQL is a constant with your SQL insert statement.
        try (Connection connection = mysqlService.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_ORDER_SQL, Statement.RETURN_GENERATED_KEYS)) {

            preparedStatement.setInt(1, order.getUser().getUserID()); 
            System.out.println("userId: " + order.getUser().getUserID());// Assuming the user ID is an integer.
            preparedStatement.setString(2, order.getOrderStatus().toString());
            System.out.println("orderStatus: " + order.getOrderStatus().toString());

            int affectedRows = preparedStatement.executeUpdate();
            System.out.println("Affected Rows: " + affectedRows);

            if (affectedRows == 0) {
                // Instead of throwing SQLException directly, you can convert it to an unchecked exception.
                throw new RuntimeException("Creating order failed, no rows affected.");
            }

            try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    order.setOrderNumber(generatedKeys.getInt(1)); // Assuming the order ID is auto-generated by the database.
                } else {
                    // Convert the SQLException to an unchecked exception.
                    throw new RuntimeException("Creating order failed, no ID obtained.");
                }
            }
        } catch (SQLException e) {
            // Log the exception and rethrow it as an unchecked exception.
            LOGGER.log(Level.SEVERE, "Database operation failed", e);
            throw new RuntimeException("Error accessing the database", e);
        }
    }

    @Override
    public Optional<Order> getOrderById(String orderId) {
        // Implement the logic to retrieve an order by its order number
        // Example: "SELECT * FROM orders WHERE orderNumber = ?"
        // Process the ResultSet and return the Order object
        return null; // Actually return the retrieved order
    }

    @Override
    public List<Order> getAllOrders() {
        // Implement the logic to retrieve all orders
        // Example: "SELECT * FROM orders"
        // Iterate through the ResultSet, build a list of orders and return it
        return new ArrayList<>(); // Actually return a list of all orders
    }

    @Override
    public void updateOrderStatus(Order order) {
        String sql = "UPDATE orders SET status = ? WHERE order_number = ?";

        try (Connection connection = mysqlService.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            preparedStatement.setString(1, order.getOrderStatus().toString());
            preparedStatement.setInt(2, order.getOrderNumber());

            int affectedRows = preparedStatement.executeUpdate();
            if (affectedRows == 0) {
                // Situations that do not affect any row can be handled according to business needs
                throw new RuntimeException("Updating order failed, no rows affected.");
            }
        } catch (SQLException e) {
            // Handling or logging exceptions
            LOGGER.log(Level.SEVERE, "Error updating order status in database", e);
            throw new RuntimeException("Database operation failed", e);
        }
    }

    @Override
    public void deleteOrder(String orderId) {
        // Implement the logic to delete an order by its order number
        // Example: "DELETE FROM orders WHERE orderNumber = ?"
    }

    @Override
    public List<Order> getOrdersByUserId(String userId) {
        // Implement the logic to retrieve orders for a specific user
        // Example: "SELECT * FROM orders WHERE userId = ?"
        return new ArrayList<>(); // Actually return a list of orders for the specific user
    }

    @Override
    public void addOrderLine(OrderLine orderLine) {
        String sql = "INSERT INTO order_lines (order_number, product_code, quantity, line_cost) VALUES (?, ?, ?, ?)";

        try (Connection connection = mysqlService.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(sql)) {

            pstmt.setString(1, orderLine.getOrderNumber());
            pstmt.setString(2, orderLine.getProductCode());
            pstmt.setInt(3, orderLine.getQuantity());
            pstmt.setBigDecimal(4, orderLine.getLineCost());

            pstmt.executeUpdate();
        } catch (SQLException e) {
            // Record exception messages to the log
            LOGGER.log(Level.SEVERE, "Error adding order line to database", e);

            // Handling exceptions, e.g. printing logs, converting to runtime exceptions, etc.
            throw new RuntimeException("Error adding order line to database", e);
        }
    }

    @Override
    public void deleteOrderLine(OrderLine orderLine) {
        String sql = "DELETE FROM order_lines WHERE order_number = ? AND product_code = ?";

        try (Connection connection = mysqlService.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(sql)) {

            pstmt.setString(1, orderLine.getOrderNumber());
            pstmt.setString(2, orderLine.getProductCode());

            // Execute the SQL statement and get the count of affected rows in the database
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new RuntimeException("Order line deletion failed, no rows affected.");
            }
        } catch (SQLException e) {
            // Record exception messages to the log
            LOGGER.log(Level.SEVERE, "Error deleting order line to database", e);

            // Handling exceptions, e.g. printing logs, converting to runtime exceptions, etc.
            throw new RuntimeException("Error deleting order line from database", e);
        }
    }

    @Override
    public Optional<OrderLine> findOrderLineByOrderNumberAndProductCode(String orderNumber, String productCode) {
        String sql = "SELECT * FROM order_lines WHERE order_number = ? AND product_code = ?";

        try (Connection connection = mysqlService.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            preparedStatement.setString(1, orderNumber);
            preparedStatement.setString(2, productCode);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    OrderLine orderLine = new OrderLine();
                    // Suppose you have a method to populate the properties of an OrderLine object from a ResultSet
                    populateOrderLineFromResultSet(orderLine, resultSet);
                    return Optional.of(orderLine);
                }
            }
        } catch (SQLException e) {
            //Logging and exception handling
            LOGGER.log(Level.SEVERE, "Error finding order line in database", e);
        }

        return Optional.empty();
    }

    private void populateOrderLineFromResultSet(OrderLine orderLine, ResultSet resultSet) throws SQLException {
        // Assume that the OrderLine has these properties: productCode, quantity, lineCost, etc.
        //  Extract the values of these properties from the resultSet and set them to the orderLine object.

        orderLine.setOrderNumber(resultSet.getString("order_number"));
        orderLine.setProductCode(resultSet.getString("product_code"));
        orderLine.setQuantity(resultSet.getInt("quantity"));
        orderLine.setLineCost(resultSet.getBigDecimal("line_cost"));
    }


    // Implement other order-related methods...

}
